#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <OneWire.h>
#include <DallasTemperature.h>


#define WIFI_SSID "NAMA_WIFI"
#define WIFI_PASSWORD "PASSWORD_WIFI"


//TOKEN GEN
#include "addons/TokenHelper.h"
//PAYLOAD real-time database
#include "addons/RTDBHelper.h"

// Sensor pins
#define ONE_WIRE_BUS 2
#define MQ135_Pin A0

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
MQ135 gasSensor(MQ135_Pin);

// Insert Firebase project API Key
#define API_KEY "AIzaSyDnPHLcIsq_Z35Rd1HVgl4RE-T13B8FYyQ"

#define DATABASE_URL "https://test-esp32-c5e8c-default-rtdb.asia-southeast1.firebasedatabase.app/" 

// Define Firebase Data object.
FirebaseData fbdo;
// Define firebase authentication.
FirebaseAuth auth;
// Definee firebase configuration.
FirebaseConfig config;

// jarak waktu data variable to send/store data ke firebase database.

unsigned long sendDataPrevMillis = 0;
const long sendDataIntervalMillis = 10000; //=> 10 detik 

// Boolean variable for sign in status.
bool signupOK = false;

void setup() {
  
  Serial.begin(115200);
  Serial.println();

  // The process of connecting the WiFi on the ESP32 to the WiFi.
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.println("---------------Connection");
  Serial.print("Connecting to : ");
  Serial.println(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");

  }
  Serial.println();
  Serial.print("Successfully connected to : ");
  Serial.println(WIFI_SSID);
  //Serial.print("IP : ");
  //Serial.println(WiFi.localIP());
  Serial.println("---------------");

  // CONFIGURATION the api key (required).
  config.api_key = API_KEY;

  // CONFIGURATION the RTDB URL (required).
  config.database_url = DATABASE_URL;

  // Sign up.
  Serial.println();
  Serial.println("---------------Sign up");
  Serial.print("Sign up new user... ");
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  Serial.println("---------------");
  
  // CONFIGURATION the callback function for the long running token generation task (RECONNECT WIFI).
  config.token_status_callback = tokenStatusCallback; //--> see addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  sensors.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  
  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > sendDataIntervalMillis || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();

    sendTemperatureData();
    sendGasQualityData();
  }
}

void sendTemperatureData() {
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);
  Serial.print("Temperature: ");
  Serial.println(temperature);

  if (Firebase.RTDB.setFloat(&fbdo, "Sensors/Temperature", temperature)) {
    Serial.println("Temperature data sent to Firebase");
  } else {
    Serial.println("Failed to send temperature data");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}

void sendGasQualityData() {
  int gasQuality = analogRead(MQ135_Pin);
  float ppm = gasQuality * (5.0 / 1023.0); 
  Serial.print("Gas Quality (ppm): ");
  Serial.println(ppm);

  if (Firebase.RTDB.setFloat(&fbdo, "Sensors/GasQuality", ppm)) {
    Serial.println("Gas quality data sent to Firebase");
  } else {
    Serial.println("Failed to send gas quality data");
    Serial.println("REASON: " + fbdo.errorReason());

    Serial.println("---------------");
  }
}
